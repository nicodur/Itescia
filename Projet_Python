import urllib.request
import urllib.request
import os
import os.path
from tkinter.filedialog import askopenfilename
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import tkinter as tk
from tkinter import ttk
from tkinter import *
path = 'C:\Documents\email'
if not os.path.exists('C:\Documents'):
    os.makedirs('C:\Documents')
if not os.path.exists('C:\Documents\email'):
    os.makedirs('C:\Documents\email')
def test_mail(ch):  #test la syntaxe d'une adresse mail
    """verifie la syntaxe d'une adresse mail donnée sous forme de chaine"""
    # extraction de l'adresse même dans le cas 'yyyyy <xxxx@xxxx.xxx>'
    motif = r"^[^<>]*<([^<>]+)>$|(^[^<>]+$)"
    a = re.findall(motif, ch.strip())
    if len(a)>0:
        adr = ''.join(a[0]).strip()
    else:
        adr = ''
    # vérification de syntaxe de l'adresse mail extraite
    if adr=='':
        return False
    else:
        motif = r"^[a-zA-Z0-9_\-]+(\.[a-zA-Z0-9_\-]+)*@[a-zA-Z0-9_\-]+(\.[a-zA-Z0-9_\-]+)*(\.[a-zA-Z]{2,6})$"
        return re.match(motif, adr)!=None

def syntaxe_mail(fichier): #on parcour chaque ligne puis test les adresse avec test-mail, si test renvoi true alors on delete la linge
    my_list = [line.rstrip('\n') for line in open(os.path.join(path, fichier))]
    with open(os.path.join(path, fichier), 'w') as f:
        for item in my_list:
            if test_mail(item) == True:
                f.write("%s\n" % item)

def url_test(url):    #test si le site est accéssible ou non"
    request = urllib.request.Request(url)
    request.get_method = lambda: 'HEAD'

    try:
        urllib.request.urlopen(request)
        return True
    except urllib.request.HTTPError:
        return False ##inclu l'erreur 404

def syntaxe_url(URL): #verifie la syntaxe d'un site web
    long=len(URL)
    test = (URL[0:7])
    test2 = (URL[long-4:long])
    test3 = (URL[long-3:long])
    if test == 'http://' and test2 == '.com':
        return True
    elif test == 'https:/' and test2 == '.com':
        return True
    else:
        return False
def lect(nom):
    with open(nom, 'r') as f:
        lines = [line.strip('\n') for line in f.readlines()]

    carnet = [line for line in lines]
    return carnet
def lecture(nom):
    tmp=""
    with open(os.path.join(path, nom), 'r') as f:
        tmp=f.read()
        f.close()
    return tmp

def importer(source, destination):
    fs = open(source, 'r')
    fd = open(destination, 'a')
    txt = fs.readline()
   # fd.write('\n')
    while txt:
        fd.write(txt)
        txt = fs.readline()
    fs.close()
    fd.close()

def ecriture(fichier,my_list,filepath):
    print(fichier)
    print(filepath)
    with open(os.path.join(path, fichier), 'a') as f:
        for item in my_list:
            f.write("%s\n" % item)
    f.close()

def SuppDub(fichier):
    my_list = [line.rstrip('\n') for line in open(os.path.join(path,fichier))]
    my_list= set(my_list) #tri la liste
    with open(os.path.join(path,fichier), 'w') as f:
        for item in my_list:
            f.write("%s\n" % item)

def crawler(url,fichier,filepath):
    Page_Web = str(urllib.request.urlopen(url).read())
    pos = Page_Web.find("mailto:")
    maListe=[]
    while pos != -1 :
        Page_Web = Page_Web[pos:]
        pos = Page_Web.find('"')
        mail = Page_Web[0:pos]
        maListe.append(mail[7:pos])
        Page_Web = Page_Web[pos:]
        pos = Page_Web.find("mailto:")
    ecriture(fichier,maListe,filepath)
    print(maListe)

def mail(froma,sento,objet,mess): # envoie un mail avec froma l'addresse d'envoi;sento le destinataire;objet;message
    msg = MIMEMultipart()
    fromaddr = froma
    toaddr = sento
    ob = objet
    mes = mess
    msg = MIMEMultipart()
    msg['From'] = fromaddr
    msg['To'] = toaddr
    msg['Subject'] = objet
    message = mes
    msg.attach(MIMEText(message))
    mailserver = smtplib.SMTP('smtp.gmail.com', 587)
    mailserver.ehlo()
    mailserver.starttls()
    mailserver.ehlo()
    mailserver.login('nicolas.Durandd@gmail.com', 'Mot de passe')
    mailserver.sendmail(fromaddr,sento, msg.as_string())
    mailserver.quit()
def callbackFunc(event):
    print("New Element Selected")

def OpenFile(filepath):
    name = askopenfilename(initialdir="C:/Documents/email",
                           filetypes =(("Text File", "*.txt"),("All Files","*.*")),
                           title = "Choose a file."
                           )
    importer(name,filepath)

def liste_mail(ex,ob,mess,fichier):
    my_list = [line.rstrip('\n') for line in open(os.path.join(path,fichier))]
    for item in my_list:
        mail(ex,item,ob,mess)

def page4(expediteur,objet,message,fichier):
    four= Tk()
    LabelTest = tk.Label(four,text="Email test").grid(row=1,column=1)
    Test=Entry(four)
    Test.grid(row=1,column=2)
    print(expediteur)
    b= Button(four, text="Test!", command=lambda: [mail(expediteur,str(Test.get()),objet,message)])
    b.grid(row=2, column=2)
    b2=Button(four, text="Mail Go!", command=lambda: [liste_mail(expediteur,objet,message,fichier)])
    b2.grid(row=3,column=2)

def page3(filepath,fichier):
    third = Tk()
    third.geometry('500x500+120+120')
    LabelExpe = tk.Label(third,text="expediteur").grid(row=1,column=1)
    Expedi = Entry(third)
    Expedi.grid(row=2, column=1)
    LabelObje = tk.Label(third,text = "Objet").grid(row=4,column=1)
    Obje= Entry(third)
    Obje.grid(row=5,column=1)
    LabelMess = tk.Label(third,text = "Le message",).grid(row=8,column=1)
    Mess= Entry(third,width=100)
    Mess.grid(row=9,column=1)
    Button(third,text="OK", command=lambda:[page4(str(Expedi.get()),str(Obje.get()),str(Mess.get()),fichier),third.destroy()]).grid(row=10,column=1)

def page2(filepath,fichier):
    top = Tk()
    maliste=lect(filepath)
    fichier2=str('C:\Documents\email'+"\\""fichier.txt")
    filename = StringVar(top)
    print(fichier)
    print(filepath)
    labelTop = tk.Label(top,text="MailBox")
    labelTop.grid(column=1, row=0)
    comboExample = ttk.Combobox(top,width=30,values=maliste).grid(row=1, column=0)
    Button(top, text="Supprimer Doublon", command=lambda: [SuppDub(fichier), page2(filepath,fichier),top.destroy()]).grid(row=2,
                                                                                                             column=0)
    Button(top, text="importer fichier texte", command=lambda: [OpenFile(filepath),page2(filepath,fichier),top.destroy()]).grid(row=3,column=0)
    Label2 = Label(top, text="Site a crawler").grid(row=4,column=0)
    entr = Entry(top)
    entr.grid(row=4,column=1)
    Button(top, text="OK pour crawler:", command=lambda:[crawler(str(entr.get()),fichier,filepath),page2(filepath,fichier),top.destroy()]).grid(row=4, column=2)
    Button(top, text="Test des mails", command=lambda:[syntaxe_mail(fichier),page2(filepath,fichier),top.destroy()]).grid(row=5,column=0)

    LabelFinal = Label(top, text="Une fois valider cliquer sur GO! pour lancer les mails")

    Button(top,text="GO!", command=lambda:[page3(filepath,fichier),top.destroy()]).grid(row=7,column=2)

def aff():
    chemin= str(entree.get())
    fichier= str(entree.get()+".txt")
    var1=os.path.isfile('C:\Documents\email'+"\\"+chemin+".txt")
    che=str('C:\Documents\email'+"\\"+chemin+".txt")
    if(var1==True): # si le fichier existe on ouvre la nouvelle fonction avec le fichier sinon on le crée
        fenetre.destroy()
        page2(che,fichier)
    else:
        fichier = open(che, "x")
        print (che)
        with open(os.path.join(path, che), 'w') as f:
            f.write("")
        f.close()
        fenetre.destroy()
        page2(che,fichier)

fenetre = Tk() # ouvre la premiere fenetre
label = Label(fenetre, text="Nom de la campagne en .txt").grid(row=0, column=1)
Button(fenetre, text="OK", command=aff).grid(row=1,column=2)
entree = Entry(fenetre) # ajout d'un champ pour ecrire
entree.grid(row=1, column=1)


fenetre.mainloop()
